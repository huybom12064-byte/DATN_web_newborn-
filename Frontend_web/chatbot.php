<?php
// Kh·ªüi ƒë·ªông session ƒë·ªÉ qu·∫£n l√Ω ng∆∞·ªùi d√πng
session_start();

// Th√¥ng tin k·∫øt n·ªëi database
const DB_HOST = 'localhost';
const DB_USER = 'root';
const DB_PASS = '';
const DB_NAME = 'newborn_shop1';

// API Key cho Gemini 2.0 Flash (thay b·∫±ng API Key th·ª±c t·∫ø c·ªßa b·∫°n)
const GEMINI_API_KEY = 'YOUR_GEMINI_API_KEY';

/**
 * K·∫øt n·ªëi t·ªõi database
 * @return mysqli K·∫øt n·ªëi database
 * @throws Exception N·∫øu k·∫øt n·ªëi th·∫•t b·∫°i
 */
function connectDatabase() {
    $conn = new mysqli(DB_HOST, DB_USER, DB_PASS, DB_NAME);
    if ($conn->connect_error) {
        throw new Exception('K·∫øt n·ªëi database th·∫•t b·∫°i: ' . $conn->connect_error);
    }
    $conn->set_charset('utf8mb4');
    return $conn;
}

/**
 * T·∫°o b·∫£ng chatbot_messages n·∫øu ch∆∞a t·ªìn t·∫°i
 * @param mysqli $conn K·∫øt n·ªëi database
 */
function createMessagesTable($conn) {
    $query = "
        CREATE TABLE IF NOT EXISTS chatbot_messages (
            id INT AUTO_INCREMENT PRIMARY KEY,
            user_id INT NULL,
            message TEXT NOT NULL,
            is_bot TINYINT(1) DEFAULT 0,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            INDEX idx_user_id (user_id)
        ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_general_ci";
    $conn->query($query);
}

/**
 * T√¨m ki·∫øm th√¥ng tin trong t·∫•t c·∫£ c√°c b·∫£ng database
 * @param string $message Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
 * @param mysqli $conn K·∫øt n·ªëi database
 * @param int|null $user_id ID ng∆∞·ªùi d√πng (n·∫øu c√≥)
 * @return array M·∫£ng ch·ª©a ph·∫£n h·ªìi v√† flag c·∫ßn g·ªçi API
 */
function searchDatabase($message, $conn, $user_id) {
    $message = strtolower(trim($message));
    $keywords = [
        'xin ch√†o' => 'greeting',
        'hello' => 'greeting',
        'ch√†o' => 'greeting',
        's·∫£n ph·∫©m' => 'sanpham',
        'gi√°' => 'sanpham',
        'mua' => 'sanpham',
        'h√†ng' => 'sanpham',
        'b√© m·∫∑c' => 'sanpham',
        'b√© ng·ªß' => 'sanpham',
        'b√© ch∆°i' => 'sanpham',
        'b√© ƒÉn u·ªëng' => 'sanpham',
        'b√© v·ªá sinh' => 'sanpham',
        'b√© ra ngo√†i' => 'sanpham',
        'gi·ªè h√†ng' => 'gio_hang',
        'ƒë∆°n h√†ng' => 'thanhtoan',
        'chi ti·∫øt ƒë∆°n' => 'chitiet_hoadon',
        't√†i kho·∫£n' => 'users',
        'ng∆∞·ªùi d√πng' => 'users'
    ];

    $response = "";
    $needsApi = stripos($message, 'c√°ch s·ª≠ d·ª•ng') !== false || 
                stripos($message, 'h∆∞·ªõng d·∫´n') !== false || 
                stripos($message, 'th√¥ng tin th√™m') !== false ||
                stripos($message, 'm·∫πo') !== false ||
                stripos($message, 'c√°ch chƒÉm s√≥c') !== false;

    // Ki·ªÉm tra t·ª´ kh√≥a
    $table = null;
    foreach ($keywords as $keyword => $tbl) {
        if (stripos($message, $keyword) !== false) {
            $table = $tbl;
            break;
        }
    }

    if ($table === 'greeting') {
        $response = "Ch√†o b·∫°n!\n\n- R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n t·∫°i c·ª≠a h√†ng Nous.\n- B·∫°n c·∫ßn t√¨m s·∫£n ph·∫©m, xem gi·ªè h√†ng, hay th√¥ng tin g√¨ kh√°c? üòä\n";
        return ['response' => $response, 'needsApi' => false];
    }

    if ($table) {
        switch ($table) {
            case 'sanpham':
                $stmt = $conn->prepare("
                    SELECT ten_san_pham, gia, loai_san_pham, mo_ta, so_luong 
                    FROM sanpham 
                    WHERE LOWER(ten_san_pham) LIKE ? OR LOWER(loai_san_pham) LIKE ?
                    LIMIT 5
                ");
                $searchTerm = "%$message%";
                $stmt->bind_param('ss', $searchTerm, $searchTerm);
                $stmt->execute();
                $result = $stmt->get_result();

                if ($result->num_rows > 0) {
                    $response = "D∆∞·ªõi ƒë√¢y l√† c√°c s·∫£n ph·∫©m ph√π h·ª£p:\n\n";
                    while ($row = $result->fetch_assoc()) {
                        $response .= sprintf(
                            "- **%s** (Lo·∫°i: %s)\n  - Gi√°: %s VNƒê\n  - M√¥ t·∫£: %s\n  - S·ªë l∆∞·ª£ng c√≤n l·∫°i: %d\n\n",
                            htmlspecialchars($row['ten_san_pham']),
                            htmlspecialchars($row['loai_san_pham']),
                            number_format($row['gia'], 0, ',', '.'),
                            htmlspecialchars($row['mo_ta']),
                            $row['so_luong']
                        );
                    }
                } else {
                    $response = "Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m ph√π h·ª£p trong c·ª≠a h√†ng:\n\n- Vui l√≤ng th·ª≠ t·ª´ kh√≥a kh√°c.\n";
                }
                $stmt->close();
                break;

            case 'gio_hang':
                if (!$user_id) {
                    $response = "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem gi·ªè h√†ng:\n\n- ƒêƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.\n";
                    break;
                }
                $stmt = $conn->prepare("
                    SELECT s.ten_san_pham, g.so_luong, s.gia, (g.so_luong * s.gia) AS thanh_tien
                    FROM gio_hang g
                    INNER JOIN sanpham s ON g.san_pham_id = s.id
                    WHERE g.user_id = ?
                ");
                $stmt->bind_param('i', $user_id);
                $stmt->execute();
                $result = $stmt->get_result();

                if ($result->num_rows > 0) {
                    $response = "Gi·ªè h√†ng c·ªßa b·∫°n:\n\n";
                    $total = 0;
                    while ($row = $result->fetch_assoc()) {
                        $response .= sprintf(
                            "- **%s**\n  - S·ªë l∆∞·ª£ng: %d\n  - Gi√° ƒë∆°n v·ªã: %s VNƒê\n  - Th√†nh ti·ªÅn: %s VNƒê\n\n",
                            htmlspecialchars($row['ten_san_pham']),
                            $row['so_luong'],
                            number_format($row['gia'], 0, ',', '.'),
                            number_format($row['thanh_tien'], 0, ',', '.')
                        );
                        $total += $row['thanh_tien'];
                    }
                    $response .= sprintf("- **T·ªïng c·ªông**: %s VNƒê\n\n", number_format($total, 0, ',', '.'));
                } else {
                    $response = "Gi·ªè h√†ng c·ªßa b·∫°n ƒëang tr·ªëng:\n\n- H√£y th√™m s·∫£n ph·∫©m ƒë·ªÉ mua s·∫Øm!\n";
                }
                $stmt->close();
                break;

            case 'thanhtoan':
                if (!$user_id) {
                    $response = "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem ƒë∆°n h√†ng:\n\n- ƒêƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.\n";
                    break;
                }
                $stmt = $conn->prepare("
                    SELECT id, hoTen, email, soDienThoai, diaChi, ngayThanhToan, tongTien
                    FROM thanhtoan
                    WHERE user_id = ?
                    ORDER BY ngayThanhToan DESC
                    LIMIT 5
                ");
                $stmt->bind_param('i', $user_id);
                $stmt->execute();
                $result = $stmt->get_result();

                if ($result->num_rows > 0) {
                    $response = "C√°c ƒë∆°n h√†ng g·∫ßn ƒë√¢y c·ªßa b·∫°n:\n\n";
                    while ($row = $result->fetch_assoc()) {
                        $response .= sprintf(
                            "- **ƒê∆°n h√†ng ID: %d**\n  - T√™n: %s\n  - Email: %s\n  - S·ªë ƒëi·ªán tho·∫°i: %s\n  - ƒê·ªãa ch·ªâ: %s\n  - Ng√†y ƒë·∫∑t: %s\n  - T·ªïng ti·ªÅn: %s VNƒê\n\n",
                            $row['id'],
                            htmlspecialchars($row['hoTen']),
                            htmlspecialchars($row['email']),
                            htmlspecialchars($row['soDienThoai']),
                            htmlspecialchars($row['diaChi']),
                            $row['ngayThanhToan'],
                            number_format($row['tongTien'], 0, ',', '.')
                        );
                    }
                } else {
                    $response = "B·∫°n ch∆∞a c√≥ ƒë∆°n h√†ng n√†o:\n\n- H√£y mua s·∫Øm ƒë·ªÉ t·∫°o ƒë∆°n h√†ng!\n";
                }
                $stmt->close();
                break;

            case 'chitiet_hoadon':
                preg_match('/\d+/', $message, $matches);
                $hoa_don_id = isset($matches[0]) ? (int)$matches[0] : 0;

                if (!$user_id || !$hoa_don_id) {
                    $response = "Vui l√≤ng cung c·∫•p ID ƒë∆°n h√†ng v√† ƒëƒÉng nh·∫≠p:\n\n- ƒêƒÉng nh·∫≠p ƒë·ªÉ xem chi ti·∫øt ƒë∆°n h√†ng.\n- Cung c·∫•p ID h·ª£p l·ªá (v√≠ d·ª•: 'chi ti·∫øt ƒë∆°n 42').\n";
                    break;
                }
                $stmt = $conn->prepare("
                    SELECT s.ten_san_pham, c.soLuong, c.giaTien, c.thanhTien
                    FROM chitiet_hoadon c
                    INNER JOIN sanpham s ON c.san_pham_id = s.id
                    INNER JOIN thanhtoan t ON c.hoa_don_id = t.id
                    WHERE c.hoa_don_id = ? AND t.user_id = ?
                ");
                $stmt->bind_param('ii', $hoa_don_id, $user_id);
                $stmt->execute();
                $result = $stmt->get_result();

                if ($result->num_rows > 0) {
                    $response = "Chi ti·∫øt ƒë∆°n h√†ng ID $hoa_don_id:\n\n";
                    while ($row = $result->fetch_assoc()) {
                        $response .= sprintf(
                            "- **%s**\n  - S·ªë l∆∞·ª£ng: %d\n  - Gi√° ƒë∆°n v·ªã: %s VNƒê\n  - Th√†nh ti·ªÅn: %s VNƒê\n\n",
                            htmlspecialchars($row['ten_san_pham']),
                            $row['soLuong'],
                            number_format($row['giaTien'], 0, ',', '.'),
                            number_format($row['thanhTien'], 0, ',', '.')
                        );
                    }
                } else {
                    $response = "Kh√¥ng t√¨m th·∫•y chi ti·∫øt ƒë∆°n h√†ng ID $hoa_don_id:\n\n- Vui l√≤ng ki·ªÉm tra l·∫°i ID ƒë∆°n h√†ng.\n";
                }
                $stmt->close();
                break;

            case 'users':
                if (!$user_id) {
                    $response = "Vui l√≤ng ƒëƒÉng nh·∫≠p ƒë·ªÉ xem th√¥ng tin t√†i kho·∫£n:\n\n- ƒêƒÉng nh·∫≠p ƒë·ªÉ ti·∫øp t·ª•c.\n";
                    break;
                }
                $stmt = $conn->prepare("
                    SELECT name, phone, email, address, created_at
                    FROM users
                    WHERE id = ?
                ");
                $stmt->bind_param('i', $user_id);
                $stmt->execute();
                $result = $stmt->get_result();

                if ($result->num_rows > 0) {
                    $row = $result->fetch_assoc();
                    $response = "Th√¥ng tin t√†i kho·∫£n c·ªßa b·∫°n:\n\n";
                    $response .= sprintf(
                        "- **T√™n**: %s\n- **S·ªë ƒëi·ªán tho·∫°i**: %s\n- **Email**: %s\n- **ƒê·ªãa ch·ªâ**: %s\n- **Ng√†y t·∫°o**: %s\n\n",
                        htmlspecialchars($row['name']),
                        htmlspecialchars($row['phone']),
                        htmlspecialchars($row['email']),
                        htmlspecialchars($row['address']),
                        $row['created_at']
                    );
                } else {
                    $response = "Kh√¥ng t√¨m th·∫•y th√¥ng tin t√†i kho·∫£n:\n\n- Vui l√≤ng ki·ªÉm tra l·∫°i.\n";
                }
                $stmt->close();
                break;
        }
    }

    // N·∫øu kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ database ho·∫∑c kh√¥ng kh·ªõp v·ªõi t·ª´ kh√≥a, chuy·ªÉn sang API
    if (!$response && !$table) {
        return ['response' => '', 'needsApi' => true];
    }
    return ['response' => $response, 'needsApi' => $needsApi];
}

/**
 * G·ªçi Gemini 2.0 Flash API v·ªõi y√™u c·∫ßu ƒë·ªãnh d·∫°ng ph·∫£n h·ªìi r√µ r√†ng
 * @param string $message Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng
 * @param string|null $context Ph·∫£n h·ªìi t·ª´ database (n·∫øu c√≥)
 * @return string Ph·∫£n h·ªìi t·ª´ API
 * @throws Exception N·∫øu g·ªçi API th·∫•t b·∫°i
 */
function callGeminiAPI($message, $context = null) {
    if (empty(GEMINI_API_KEY)) {
        throw new Exception('API Key kh√¥ng ƒë∆∞·ª£c thi·∫øt l·∫≠p. Vui l√≤ng ki·ªÉm tra v√† c·∫≠p nh·∫≠t trong m√£.');
    }

    $url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
    $prompt = "B·∫°n l√† tr·ª£ l√Ω mua s·∫Øm cho c·ª≠a h√†ng Nous, chuy√™n cung c·∫•p s·∫£n ph·∫©m cho tr·∫ª s∆° sinh. H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau m·ªôt c√°ch th√¢n thi·ªán, chuy√™n nghi·ªáp, v√† chuy√™n s√¢u, ƒë·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi th√†nh danh s√°ch c√≥ d·∫•u ƒë·∫ßu d√≤ng (-), m·ªói √Ω xu·ªëng d√≤ng r√µ r√†ng. N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan tr·ª±c ti·∫øp ƒë·∫øn c·ª≠a h√†ng, h√£y cung c·∫•p th√¥ng tin h·ªØu √≠ch v√† ch√≠nh x√°c nh·∫•t c√≥ th·ªÉ d·ª±a tr√™n ki·∫øn th·ª©c chung:\n\n";
    if ($context) {
        $prompt .= "D·ª±a tr√™n th√¥ng tin sau t·ª´ c·ª≠a h√†ng:\n$context\nH√£y tr·∫£ l·ªùi: $message";
    } else {
        $prompt .= $message;
    }

    $data = [
        'contents' => [
            [
                'parts' => [
                    ['text' => $prompt]
                ]
            ]
        ]
    ];

    $ch = curl_init($url);
    curl_setopt_array($ch, [
        CURLOPT_RETURNTRANSFER => true,
        CURLOPT_POST => true,
        CURLOPT_HTTPHEADER => [
            'Content-Type: application/json',
            'X-goog-api-key: ' . GEMINI_API_KEY
        ],
        CURLOPT_POSTFIELDS => json_encode($data),
        CURLOPT_TIMEOUT => 10
    ]);

    $response = curl_exec($ch);
    if (curl_errno($ch)) {
        throw new Exception('L·ªói cURL khi g·ªçi Gemini API: ' . curl_error($ch));
    }
    curl_close($ch);

    $responseData = json_decode($response, true);
    if (json_last_error() !== JSON_ERROR_NONE) {
        throw new Exception('L·ªói gi·∫£i m√£ JSON t·ª´ Gemini API: ' . json_last_error_msg());
    }
    if (!isset($responseData['candidates'][0]['content']['parts'][0]['text'])) {
        throw new Exception('Kh√¥ng nh·∫≠n ƒë∆∞·ª£c ph·∫£n h·ªìi h·ª£p l·ªá t·ª´ Gemini API. Ki·ªÉm tra API Key, gi·ªõi h·∫°n s·ª≠ d·ª•ng, ho·∫∑c k·∫øt n·ªëi m·∫°ng.');
    }

    return $responseData['candidates'][0]['content']['parts'][0]['text'];
}

/**
 * L∆∞u tin nh·∫Øn v√†o database
 * @param mysqli $conn K·∫øt n·ªëi database
 * @param int|null $user_id ID ng∆∞·ªùi d√πng
 * @param string $message Tin nh·∫Øn
 * @param bool $isBot C√≥ ph·∫£i tin nh·∫Øn c·ªßa bot kh√¥ng
 */
function saveMessage($conn, $user_id, $message, $isBot = false) {
    $stmt = $conn->prepare("INSERT INTO chatbot_messages (user_id, message, is_bot) VALUES (?, ?, ?)");
    $isBotInt = (int)$isBot;
    $stmt->bind_param('isi', $user_id, $message, $isBotInt);
    $stmt->execute();
    $stmt->close();
}

// X·ª≠ l√Ω y√™u c·∫ßu ch√≠nh
try {
    $conn = connectDatabase();
    createMessagesTable($conn);

    if ($_SERVER['REQUEST_METHOD'] === 'POST') {
        $input = json_decode(file_get_contents('php://input'), true);
        $message = trim($input['message'] ?? '');

        if (empty($message)) {
            echo json_encode(['success' => false, 'message' => "Tin nh·∫Øn kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng:\n\n- Vui l√≤ng nh·∫≠p c√¢u h·ªèi ho·∫∑c y√™u c·∫ßu."]);
            exit;
        }

        $user_id = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : null;

        // L∆∞u tin nh·∫Øn ng∆∞·ªùi d√πng
        saveMessage($conn, $user_id, $message);

        // T√¨m ki·∫øm trong database
        $dbResult = searchDatabase($message, $conn, $user_id);
        $bot_response = $dbResult['response'];

        // G·ªçi Gemini API n·∫øu c·∫ßn ho·∫∑c kh√¥ng c√≥ ph·∫£n h·ªìi t·ª´ database
        if ($dbResult['needsApi'] || !$bot_response) {
            try {
                error_log("G·ªçi Gemini API cho c√¢u h·ªèi: $message t·∫°i " . date('Y-m-d H:i:s'));
                $api_response = callGeminiAPI($message, $bot_response);
                if ($bot_response) {
                    $bot_response .= "\nTh√¥ng tin b·ªï sung t·ª´ ngu·ªìn ngo√†i:\n\n" . $api_response;
                } else {
                    $bot_response = $api_response;
                }
            } catch (Exception $e) {
                $error_msg = "Xin l·ªói, t√¥i g·∫∑p l·ªói khi x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n:\n\n- " . $e->getMessage() . "\n- Vui l√≤ng ki·ªÉm tra API Key, k·∫øt n·ªëi m·∫°ng, ho·∫∑c th·ª≠ l·∫°i sau.";
                $bot_response = $bot_response ?: $error_msg;
                error_log('Gemini API error: ' . $e->getMessage() . ' t·∫°i ' . date('Y-m-d H:i:s'));
            }
        }

        // L∆∞u ph·∫£n h·ªìi c·ªßa bot
        saveMessage($conn, $user_id, $bot_response, true);

        echo json_encode(['success' => true, 'message' => $bot_response]);
    } elseif ($_SERVER['REQUEST_METHOD'] === 'GET') {
        // L·∫•y l·ªãch s·ª≠ tr√≤ chuy·ªán
        $user_id = isset($_SESSION['user_id']) ? $_SESSION['user_id'] : null;
        $stmt = $conn->prepare("
            SELECT message, is_bot 
            FROM chatbot_messages 
            WHERE user_id = ? OR user_id IS NULL 
            ORDER BY created_at ASC 
            LIMIT 50
        ");
        $stmt->bind_param('i', $user_id);
        $stmt->execute();
        $result = $stmt->get_result();

        $messages = [];
        while ($row = $result->fetch_assoc()) {
            $messages[] = [
                'message' => $row['message'],
                'is_bot' => (bool)$row['is_bot']
            ];
        }

        echo json_encode($messages);
        $stmt->close();
    }

    $conn->close();
} catch (Exception $e) {
    error_log('Chatbot error: ' . $e->getMessage() . ' t·∫°i ' . date('Y-m-d H:i:s'));
    echo json_encode(['success' => false, 'message' => "L·ªói h·ªá th·ªëng:\n\n- " . $e->getMessage() . "\n- Vui l√≤ng th·ª≠ l·∫°i sau."]);
}
?>